#!/usr/bin/python
# Floris Douw
# 2020
#
# AoC 2020 Day 11: Seating System


class Grid:
    def __init__(self, input):
        self.grid = [[*(line.strip())] for line in input]
        self.width = len(self.grid[0])  # Assume rectangle
        self.height = len(self.grid)

    def see_occupant(self, x, y, dx, dy):
        """
        Look from position (x,y) in the direction defined by (dx,dy).
        Return True if the first chair in sight is occupied.
        Return False if the first chair is empty, or no chairs are visible in this direction.
        """
        if dx == 0 and dy == 0:   # Makes looping easier
            return False
        x += dx
        y += dy
        while 0 <= x < self.width and 0 <= y < self.height:
            if self.grid[y][x] == '#':
                return True
            if self.grid[y][x] == 'L':
                return False
            x += dx
            y += dy
        return False

    def update2(self):
        tmp = [row.copy() for row in self.grid]
        changed = False
        for y in range(self.height):
            for x in range(self.width):
                count = sum(self.see_occupant(x, y, i, j) for i in [-1, 0, 1] for j in [-1, 0, 1])
                if self.grid[y][x] == '#' and count >= 5:
                    tmp[y][x] = 'L'
                    changed = True
                elif self.grid[y][x] == 'L' and count == 0:
                    tmp[y][x] = '#'
                    changed = True
                else:
                    tmp[y][x] = self.grid[y][x]
        self.grid = tmp
        return changed

    def count_occupants(self):
        return sum(row.count('#') for row in self.grid)

    def show(self):
        print('\n'.join(''.join(row) for row in self.grid))
        print('')


def showgrid(grid):
    for y in range(len(grid)):
        print(''.join(grid[y]))
    print('')


def update(grid):
    tmp = [row.copy() for row in grid]
    changed = False
    for y in range(len(grid)):
        for x in range(len(grid[y])):
            if grid[y][x] == 'L':
                seatAvailable = True
                for i in range(max(0, y-1), min(y+2, len(grid))):
                    for j in range(max(0, x - 1), min(x + 2, len(grid[y]))):
                        if grid[i][j] == '#':
                            seatAvailable = False
                            break
                    if not seatAvailable:
                        break
                if seatAvailable:
                    changed = True
                    tmp[y][x] = '#'
            elif grid[y][x] == '#':
                count = 0
                for i in range(max(0, y-1), min(y+2, len(grid))):
                    for j in range(max(0, x - 1), min(x + 2, len(grid[y]))):
                        if grid[i][j] == '#':
                            count += 1
                if count >= 5:  # 4 adjacent + the seat itself
                    changed = True
                    tmp[y][x] = 'L'
    return changed, tmp


with open('input/day11') as f:
    grid = [[*(line.strip())] for line in f]
    changed = True
    bla = 0
    while changed:
        changed, grid = update(grid)
    count = 0
    for y in range(len(grid)):
        count += grid[y].count('#')
    print(f'Part 1: {count}')

with open('input/day11') as f:
    grid = Grid(f.readlines())
    while grid.update2():
        pass
    print(f'Part 2: {grid.count_occupants()}')
